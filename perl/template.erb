package File::Groups;
#
# ********************
# AUTOGENERATED FILE DO NOT MODIFY
# ********************
#

our $VERSION = '0.1000';

<%- groups = Util.groups(json) %>
<%- groups.each do |method, record| %>
  sub <%= method %> { return File::Groups_<%= method %> }
<% end %>

<%- groups.each do |method, record| %>
  package File::Groups_<%= method %>;

  sub extensions {
  return $_[1] ? <%= Util.extensions(record["files"], false) %> : <%= Util.extensions(record["files"], true) %>
  }

  sub media_types {
  return $_[1] ? <%= Util.mime_types(record["files"], false) %> : <%= Util.mime_types(record["files"], true) %>
  }

  <%- record["tags"] && record["tags"].each do |tag, _| %>
    sub <%= tag %> { return File::Groups_<%= method %>_<%= tag %> }
  <% end %>
<%- end %>

<%- groups.each do |method, record| %>
  <%- record["tags"] && record["tags"].each do |tag, files| %>
    package File::Groups_<%= method %>_<%= tag %>;

    sub extensions {
    return $_[1] ? <%= Util.extensions(files, false) %> : <%= Util.extensions(files, true) %>
    }
    sub media_types {
    return $_[1] ? <%= Util.mime_types(files, false) %> : <%= Util.mime_types(files, true) %>
    }
  <% end -%>
<% end %>

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

File::Groups - File extensions and media types, grouped by application and type

=head1 SYNOPSIS

Methods on C<File::Groups> return classes containing a set of media
types and file extensions. These are accessible via the C<media_types> and C<extensions>
methods, which return Array refs of values. By default only commonly used values are returned.
To return all know values pass C<1> to either method, e.g., C<< class->media_types(1) >>

In some cases additional methods can be called on the object to further restrict the set.

Let's look at some examples.

=head2 IMAGES & VIDEO

Retrieve a list of file extensions or media types used by images and video:

 use File::Groups;

 File::Groups->image->extensions;   # ['bmp', 'gif', 'ico', 'jpeg', ... ]
 File::Groups->image->media_types;  # ['image/bmp', 'image/x-ms-bmp', 'image/gif', ... ]
 File::Groups->video->extensions;   # ['asf', 'mov', 'qt', 'movie', ... ]
 File::Groups->video->media_types;  # ['video/x-ms-asf', 'video/quicktime', ... ]

Images can be filtered on by raster, vector, or web:

 File::Groups->image->web->extensions;     # ['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp']
 File::Groups->image->raster->extensions;  # ['bmp', 'gif', 'ico', 'jpeg', 'jpg', 'tif', 'tiff', 'webp']
 File::Groups->image->vector->extensions;  # ['svg']

For a complete list pass C<1> to any of these methods:

 File::Groups->image->web->extensions(1);  # ['bmp', 'dib', 'gif', 'ico', 'jfif', 'jpe', 'jpeg', ... ]

=head2 SPREADSHEETS

Retrieve a list of file extensions or media types used by spreadsheets:

 use File::Groups;

 File::Groups->spreadsheet->extensions;  # ['csv', 'xls', 'xlsx', 'xlt', ... ]
 File::Groups->spreadsheet->media_types; # ['text/csv', 'application/vnd.ms-excel', ... ]

If you only want values specific to Microsoft Excel:

 File::Groups->spreadsheet->excel->extensions;  # ['xls', 'xlsx', 'xlt', 'xltx', 'xlw']
 File::Groups->spreadsheet->excel->media_types; # ['application/vnd.ms-excel', ... ]

Or for OpenOffice Calc:

 File::Groups->spreadsheet->calc->extensions;  # ['ods', 'ots']

By default these only return common extensions, to return all:

  File::Groups->spreadsheet->excel->extensions(1);  # ['xls', 'xlsx', 'xlt', 'xltx', ... ]

=head2 EVERYTHING ELSE

See L<https://github.com/sshaw/file_groups/blob/master/README.md#groups|the list of categories and tags>.

=head1 AUTHOR

Skye Shaw (skye.shaw -AT- gmail)

=head1 COPYRIGHT

Copyright (c) 2020 Skye Shaw. All rights reserved.

=head1 LICENSE

https://opensource.org/licenses/MIT
